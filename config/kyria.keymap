/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>

/ {
    behaviors {
        tm: thumb_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        };
        // A sticky mod: if held, it's mod, if tap, it's sticky mod.
        sm: sticky_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&sk>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ---------------------------------------------------------------------------------------------------------------------------------

            bindings = <
    &kp ESC   &kp Q &kp W &kp E      &kp R    &kp T                                        &kp Y &kp U    &kp I     &kp O   &kp P    &kp BKSP
    &kp TAB   &kp A &kp S &kp D      &kp F    &kp G                                        &kp H &kp J    &kp K     &kp L   &kp SEMI &kp SQT
    &kp LSHFT &kp Z &kp X &kp C      &kp V    &kp B &kp LGUI  &kp LALT   &kp RCTRL &kp DEL &kp N &kp M    &kp COMMA &kp DOT &kp FSLH &kp RSHFT
                          &kp C_PLAY &kp LALT &mo 1 &kp SPACE &kp LCTRL  &kp RALT  &kp RET &mo 2 &kp BKSP &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp LEFT RIGHT>;
        };

        layer_1 {
// ---------------------------------------------------------------------------------------------------------------------------------

            bindings = <
    &trans &kp N1   &kp N2   &kp N3   &kp N4   &kp N5                                 &kp N6    &kp N7   &kp N8   &kp N9   &kp N0   &kp PIPE
    &trans &kp EXCL &kp AT   &kp HASH &kp DLLR &kp PRCT                               &kp CRRT  &kp AMPS &kp STAR &kp LPAR &kp RPAR &kp DQT
    &trans &kp GRAV &kp TILD &kp EQL  &kp PLUS &kp MINUS &trans &trans  &trans &trans &kp UNDER &kp LBKT &kp RBKT &kp LBRC &kp RBRC &kp BSLH
                             &trans   &trans   &trans    &trans &trans  &trans &trans &trans    &trans   &trans
            >;

            sensor-bindings = <&inc_dec_kp C_PREV C_NEXT &inc_dec_kp PG_UP PG_DN>;
        };

        layer_2 {
// ---------------------------------------------------------------------------------------------------------------------------------

            bindings = <
    &kp PSCRN  &kp F1     &kp F2     &kp F3   &kp F4      &kp F5                                  &kp F6   &kp F7   &kp F8   &kp F9    &kp F10 &trans
    &trans     &kp C_MUTE &kp C_NEXT &kp C_FF &kp C_PLAY  &kp VOLU                                &kp PGUP &kp HOME &kp UP   &kp END   &kp F11 &trans
    &trans     &none      &kp C_PREV &kp C_RW &kp C_PAUSE &kp VOLD &trans &trans    &trans &trans &kp PGDN &kp LEFT &kp DOWN &kp RIGHT &kp F12 &trans
                                     &trans   &trans      &trans   &trans &trans    &trans &trans &trans   &trans   &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(LS(TAB)) LC(TAB) &inc_dec_kp PG_UP PG_DN>;
        };
    };
};

&left_encoder {
    resolution = <2>;
};